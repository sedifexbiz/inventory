rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /* ---------- Common helpers ---------- */

    function isAuthed() {
      return request.auth != null;
    }

    // Members live at: stores/{storeId}/members/{uid}
    function memberDoc(storeId) {
      return get(/databases/$(database)/documents/stores/$(storeId)/members/$(request.auth.uid));
    }

    function inStore(storeId) {
      return isAuthed() && memberDoc(storeId).exists();
    }

    function hasRole(storeId, roles) {
      return inStore(storeId) && roles.hasAny([memberDoc(storeId).data.role]);
    }

    // ❗ fixed
    function storeIdUnchanged() {
      return !request.resource.data.diff(resource.data).changedKeys().hasAny(['storeId']);
    }

    /* ---------- Store bootstrap & management ---------- */

    // Allow a signed-in user to create their FIRST store with id == their uid,
    // exactly once, and read/update it if they’re in the store.
    match /stores/{storeId} {
      // Self-bootstrap: create /stores/{uid} once, if no membership doc exists yet
      allow create: if isAuthed()
        && storeId == request.auth.uid
        && !exists(/databases/$(database)/documents/stores/$(request.auth.uid)/members/$(request.auth.uid));

      // Owners & managers can update/delete store metadata
      allow update, delete: if hasRole(storeId, ['owner','manager']);

      // Anyone in the store can read store metadata
      allow read: if inStore(storeId);

      // Members subcollection
      match /members/{memberId} {

        // Self-bootstrap owner membership:
        // allow creating /stores/{uid}/members/{uid} with role 'owner' once.
        allow create: if isAuthed()
          && storeId == request.auth.uid
          && memberId == request.auth.uid
          && request.resource.data.role == 'owner'
          && !exists(/databases/$(database)/documents/stores/$(request.auth.uid)/members/$(request.auth.uid));

        // Read: anyone in the store can read members; always allow a user to read their own membership
        allow read: if inStore(storeId)
          || (isAuthed() && (memberId == request.auth.uid || resource.data.uid == request.auth.uid));

        // Updates:
        // - Owners can manage roles (add/remove/modify any member)
        // - Optionally allow users to update a safe subset of their own profile fields (displayName, photoURL)
        allow update: if hasRole(storeId, ['owner'])
          || (
            isAuthed() && memberId == request.auth.uid &&
            // Only allow self-updates to non-privileged fields
            request.resource.data.diff(resource.data).changedKeys().hasOnly(['displayName','photoURL'])
          );

        // Deletions: owners only
        allow delete: if hasRole(storeId, ['owner']);
      }
    }

    /* ---------- Store-scoped collections (top-level, keyed by storeId) ---------- */

    match /products/{id} {
      allow read: if inStore(resource.data.storeId);
      allow create: if hasRole(request.resource.data.storeId, ['owner','manager']);
      allow update, delete: if hasRole(resource.data.storeId, ['owner','manager']) && storeIdUnchanged();
    }

    match /customers/{id} {
      allow read: if inStore(resource.data.storeId);
      allow create: if hasRole(request.resource.data.storeId, ['owner','manager']);
      allow update, delete: if hasRole(resource.data.storeId, ['owner','manager']) && storeIdUnchanged();
    }

    match /sales/{id} {
      allow read: if inStore(resource.data.storeId);
      // cashiers/managers/owners: your existing inStore() covers who can create a sale
      allow create: if inStore(request.resource.data.storeId);
      allow update, delete: if hasRole(resource.data.storeId, ['owner','manager']) && storeIdUnchanged();
    }

    match /expenses/{id} {
      allow read: if inStore(resource.data.storeId);
      allow create: if hasRole(request.resource.data.storeId, ['owner','manager','cashier']);
      allow update: if hasRole(resource.data.storeId, ['owner','manager']) && storeIdUnchanged();
      allow delete: if hasRole(resource.data.storeId, ['owner','manager']);
    }

    match /storeSettings/{id} {
      allow read: if hasRole(resource.data.storeId, ['owner','manager']);
      allow create: if hasRole(request.resource.data.storeId, ['owner','manager']);
      allow update, delete: if hasRole(resource.data.storeId, ['owner','manager']) && storeIdUnchanged();
    }

    match /storeGoals/{id} {
      allow read: if inStore(resource.data.storeId);
      allow create: if hasRole(request.resource.data.storeId, ['owner','manager']);
      allow update, delete: if hasRole(resource.data.storeId, ['owner','manager']) && storeIdUnchanged();
    }

    match /closeouts/{id} {
      allow read: if inStore(resource.data.storeId);
      allow create: if hasRole(request.resource.data.storeId, ['owner','manager']);
      allow update, delete: if hasRole(resource.data.storeId, ['owner','manager']) && storeIdUnchanged();
    }

    match /storeUsers/{membershipId} {
      allow read: if hasRole(resource.data.storeId, ['owner']);
      allow create: if hasRole(request.resource.data.storeId, ['owner']);
      allow update: if hasRole(resource.data.storeId, ['owner']) && storeIdUnchanged();
      allow delete: if hasRole(resource.data.storeId, ['owner']);
    }

    /* ---------- User-scoped sessions ---------- */

    match /sessions/{id} {
      allow create: if isAuthed() && request.resource.data.uid == request.auth.uid;
      allow read, update, delete: if isAuthed() && resource.data.uid == request.auth.uid;
    }

    /* ---------- Deny everything else ---------- */
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
